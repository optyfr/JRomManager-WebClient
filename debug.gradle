buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'de.undercouch:gradle-download-task:4.1.1'
	}
}

plugins {
	id "de.esoco.gwt" version "1.1.0"
	id "org.sonarqube"
}

repositories {
	mavenCentral()
}

sonarqube {
  properties {
    property "sonar.projectKey", "optyfr_JRomManager-WebClient"
    property "sonar.organization", "optyfr"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

apply plugin: 'java'
sourceCompatibility = 11
targetCompatibility = 11
apply plugin: 'eclipse'

eclipse {
	classpath {
		downloadJavadoc = true
		downloadSources = true
		containers 'com.gwtplugins.gwt.eclipse.core.GWT_CONTAINER',
		           'org.eclipse.buildship.core.gradleclasspathcontainer'
	//	defaultOutputDir = file('war/WEB-INF/classes')
	}
}

apply plugin: 'de.undercouch.download'

task downloadSmartGWT(type: Download) {
	src([
		'https://www.smartclient.com/builds/SmartGWT/13.0p/LGPL/latest/smartgwt.jar',
		'https://www.smartclient.com/builds/SmartGWT/13.0p/LGPL/latest/smartgwt-skins.jar'
	])
	dest "$buildDir/SmartGWT"
	onlyIfModified true
}

task SmartGWT {
	dependsOn downloadSmartGWT
	outputs.file "$buildDir/SmartGWT/smartgwt.jar" 
}

task SmartGWTSkins {
	dependsOn downloadSmartGWT
	outputs.file "$buildDir/SmartGWT/smartgwt-skins.jar" 
}

apply plugin: 'war'
apply plugin: 'de.esoco.gwt'

dependencies {
	implementation files(SmartGWT)
	implementation files(SmartGWTSkins)
	implementation group: 'com.sksamuel.gwt', name: 'gwt-websockets', version: '1.+'
}

sourceSets {
	main {
		java {
			srcDirs = ["src/main/java"]
		}
	}
}

gwt {
    module 'jrm.webui.Client'
	/** GWT version */
	gwtVersion = '2.9.0'
	/** Add the gwt-servlet lib */
	gwtServletLib = false
	/** Add the gwt-elemental lib */
	gwtElementalLib = false
	/** Add Google plugin config (only if plugin 'eclipse' is enabled) */
	gwtPluginEclipse = true//    minHeapSize = "512M"
	compile {
		/** The level of logging detail (ERROR, WARN, INFO, TRACE, 
		 * DEBUG, SPAM, ALL) */
		logLevel = "TRACE"
		/** Compile a report that tells the "Story of Your Compile". */
		compileReport = true
		/** Compile quickly with minimal optimizations. */
		draftCompile = true
		/** Include assert statements in compiled output. */
		checkAssertions = false
		/** Script output style. (OBF, PRETTY, DETAILED)*/
		style = "DETAILED"
		/** Sets the optimization level used by the compiler. 
		 * 0=none 9=maximum. */
		optimize = 9
		/** Fail compilation if any input file contains an error. */
		failOnError = false
		/** Specifies Java source level. ("1.6", "1.7")*/
		sourceLevel = "11"
		/** The number of local workers for compiling permutations. */
		localWorkers = 3
		/** The maximum memory to be used by local workers. */
		localWorkersMem = 2048
		/** Emit extra information allow chrome dev tools to display 
		 * Java identifiers in many places instead of JavaScript functions.
		 * (NONE, ONLY_METHOD_NAME, ABBREVIATED, FULL)*/
		methodNameDisplayMode = "FULL"
		/** Specifies JsInterop mode (NONE, JS, CLOSURE) */
		//jsInteropMode = "JS"
		/** Generate and export JsInterop (since GWT 2.8) */
		generateJsInteropExports = true

		/** shown all compile errors */
        strict = false

		/** Java args */
		javaArgs=["-Dfile.encoding": 'UTF-8']
		maxHeapSize="1024m"
		minHeapSize="512m"
//		maxPermSize="128m"
	}
}

task webZip(type: Zip, dependsOn: gwtCompile) {
	from ("$buildDir/gwt/out/smartgwt")
	into "webclient"
	archiveBaseName = 'debug'
	archiveFileName = 'debug.zip'
	destinationDirectory = file("$buildDir/distributions")
}

build.dependsOn webZip

gwtCompile {
	doLast {
		delete {
			delete "war/webclient/deferredjs"
			delete fileTree("war").matching {
				include "**/*.cache.js"
				include "**/*.cache.js.gz"
			}
		}
		copy {
			from "$buildDir/gwt/out"
			into "war"
		}
	}
}

war {
	archiveBaseName = 'debug'
}